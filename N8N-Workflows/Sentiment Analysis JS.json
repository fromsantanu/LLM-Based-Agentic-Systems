{
  "name": "Sentiment Analysis JS",
  "nodes": [
    {
      "parameters": {},
      "id": "0c42ccb1-71c5-47a4-8af2-381e81ed6d99",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -96,
        -48
      ]
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1Kr0X5uIIYjOFPAA0tC1O6VEKnhpDYPPYTD373-wjUso",
          "mode": "list",
          "cachedResultName": "Treatment Feedback",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Kr0X5uIIYjOFPAA0tC1O6VEKnhpDYPPYTD373-wjUso/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Kr0X5uIIYjOFPAA0tC1O6VEKnhpDYPPYTD373-wjUso/edit#gid=0"
        },
        "options": {}
      },
      "id": "b762e510-7b50-4c55-996b-a2d2f3d378d9",
      "name": "Sheets: Read (all rows)",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        208,
        -48
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "fhdVZCBCw3KJhx9z",
          "name": "Google Auth n8n account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Keep only rows where Date === today (in any of these formats)\n// - \"dd/mm/yyyy\" or \"d/m/yy\"\n// - \"yyyy-mm-dd\"\n// - Google Sheets serial number (when returning unformatted values)\n// and Sentiment is empty\n\nconst pad = n => String(n).padStart(2, '0');\n\nfunction ymdFromDate(d) {\n  return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}`;\n}\n\nfunction normalizeToYMD(val) {\n  if (val == null) return null;\n\n  // Case 1: number -> Google Sheets serial date (days since 1899-12-30)\n  if (typeof val === 'number' && !Number.isNaN(val)) {\n    const ms = Math.round((val - 25569) * 86400 * 1000);\n    const d = new Date(ms);\n    return ymdFromDate(d);\n  }\n\n  // Case 2: Date object\n  if (val instanceof Date) {\n    return ymdFromDate(val);\n  }\n\n  // Case 3: string formats\n  const s = String(val).trim();\n\n  // 3a) dd/mm/yyyy or d/m/yy\n  let m = s.match(/^(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{2}|\\d{4})$/);\n  if (m) {\n    let day = parseInt(m[1], 10);\n    let mon = parseInt(m[2], 10);\n    let year = parseInt(m[3], 10);\n    if (year < 100) year = 2000 + year; // assume 20xx for 2-digit years\n    return `${year}-${pad(mon)}-${pad(day)}`;\n  }\n\n  // 3b) yyyy-mm-dd (already Y-M-D)\n  m = s.match(/^(\\d{4})-(\\d{1,2})-(\\d{1,2})/);\n  if (m) {\n    return `${m[1]}-${pad(m[2])}-${pad(m[3])}`;\n  }\n\n  return null; // unknown format\n}\n\n// Today's date (uses n8n workflow timezone)\nconst now = new Date();\nconst todayYMD = ymdFromDate(now);\n\nconst out = [];\nfor (const item of items) {\n  const j = item.json || {};\n  const dateYMD = normalizeToYMD(j.Date);\n  const sentiment = (j.Sentiment || '').toString().trim();\n  if (dateYMD === todayYMD && sentiment === '') {\n    out.push({ json: j });\n  }\n}\nreturn out;"
      },
      "id": "e6d7a7b2-e63b-40aa-bdee-a358bd6295cf",
      "name": "Code (JS): FilterToday",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        432,
        -48
      ]
    },
    {
      "parameters": {
        "jsCode": "const out = [];\nfor (const item of items) {\n  const j = item.json || {};\n  let content = '';\n  try {\n    content = j?.body?.choices?.[0]?.message?.content ?? j?.content ?? j?.body ?? '';\n  } catch (e) { content = ''; }\n\n  let parsed = {};\n  if (typeof content === 'string') {\n    try { parsed = JSON.parse(content); } catch (e) { parsed = {}; }\n  } else if (content && typeof content === 'object') {\n    parsed = content;\n  }\n\n  j.Sentiment = (parsed.sentiment || 'neutral');\n  j.Confidence = (parsed.confidence != null ? parsed.confidence : 0.5);\n  if (!parsed.sentiment) j._parse_error = true;\n\n  out.push({ json: j });\n}\nreturn out;\n"
      },
      "id": "df59b40a-0514-42c9-9428-162102e7198d",
      "name": "Code (JS): ParseSentiment",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1008,
        -48
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1Kr0X5uIIYjOFPAA0tC1O6VEKnhpDYPPYTD373-wjUso",
          "mode": "list",
          "cachedResultName": "Treatment Feedback",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Kr0X5uIIYjOFPAA0tC1O6VEKnhpDYPPYTD373-wjUso/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Kr0X5uIIYjOFPAA0tC1O6VEKnhpDYPPYTD373-wjUso/edit#gid=0"
        },
        "columnToMatchOn": "ID",
        "valueToMatchOn": "={{ $('Code (JS): FilterToday').item.json.ID }}",
        "fieldsUi": {
          "values": [
            {
              "column": "Sentiment",
              "fieldValue": "={{ $json.message.content.sentiment }}"
            },
            {
              "column": "Confidence",
              "fieldValue": "={{ $json.message.content.confidence }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a5d26347-b2a8-431c-aed8-52c7af06b326",
      "name": "Sheets: Update",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        1312,
        -48
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "fhdVZCBCw3KJhx9z",
          "name": "Google Auth n8n account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1Kr0X5uIIYjOFPAA0tC1O6VEKnhpDYPPYTD373-wjUso",
          "mode": "list",
          "cachedResultName": "Treatment Feedback",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Kr0X5uIIYjOFPAA0tC1O6VEKnhpDYPPYTD373-wjUso/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Kr0X5uIIYjOFPAA0tC1O6VEKnhpDYPPYTD373-wjUso/edit#gid=0"
        },
        "options": {}
      },
      "id": "42e526be-f2df-437b-90f8-a7f904ec93d5",
      "name": "Sheets: Read (all rows) (summary)",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        1616,
        -48
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "fhdVZCBCw3KJhx9z",
          "name": "Google Auth n8n account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Build counts/percentages for today's rows and emit a single summary item\nconst pad = n => String(n).padStart(2, '0');\nfunction ymdFromDate(d){ return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}`; }\nfunction normalizeToYMD(val){\n  if (val == null) return null;\n  if (typeof val === 'number' && !Number.isNaN(val)) {\n    const ms = Math.round((val - 25569) * 86400 * 1000);\n    return ymdFromDate(new Date(ms));\n  }\n  if (val instanceof Date) return ymdFromDate(val);\n  const s = String(val).trim();\n  let m = s.match(/^(\\d{1,2})[\\/\\-](\\d{1,2})[\\/\\-](\\d{2}|\\d{4})$/);\n  if (m) {\n    let day = parseInt(m[1], 10), mon = parseInt(m[2], 10), year = parseInt(m[3], 10);\n    if (year < 100) year = 2000 + year;\n    return `${year}-${pad(mon)}-${pad(day)}`;\n  }\n  m = s.match(/^(\\d{4})-(\\d{1,2})-(\\d{1,2})/);\n  if (m) return `${m[1]}-${pad(m[2])}-${pad(m[3])}`;\n  return null;\n}\n\nconst todayYMD = ymdFromDate(new Date());\nconst counts = { positive: 0, neutral: 0, negative: 0 };\nlet total = 0;\n\nfor (const it of items) {\n  const j = it.json || {};\n  const d = normalizeToYMD(j.Date);\n  if (d === todayYMD) {\n    let s = (j.Sentiment || 'neutral').toString().toLowerCase().trim();\n    if (!(s in counts)) s = 'neutral';\n    counts[s] += 1; total += 1;\n  }\n}\n\nconst pct = n => total ? Math.round((n/total)*100) : 0;\nreturn [{\n  json: {\n    date: todayYMD, total,\n    positive: counts.positive, neutral: counts.neutral, negative: counts.negative,\n    pct_positive: pct(counts.positive), pct_neutral: pct(counts.neutral), pct_negative: pct(counts.negative),\n    labels: [\"Positive\",\"Neutral\",\"Negative\"],\n    data: [counts.positive, counts.neutral, counts.negative]\n  }\n}];\n"
      },
      "id": "4aa8505f-76e1-4ab6-a526-0f8d794a2c38",
      "name": "Code (JS): BuildSummary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1920,
        -48
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://quickchart.io/chart",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "21fddefb-fb72-4d51-8cab-37680c8a1464",
      "name": "HTTP: QuickChart (PNG)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2480,
        -48
      ]
    },
    {
      "parameters": {
        "sendTo": "fromsantanu@gmail.com",
        "subject": "={{'Daily Patient Sentiment – ' + new Date().toISOString().slice(0,10)}}",
        "message": "=<b>Daily Patient Sentiment ({{ new Date().toLocaleString('en-GB', {\n  timeZone: 'Asia/Kolkata', day: '2-digit', month: 'short', year: 'numeric',\n  hour: '2-digit', minute: '2-digit'\n}) }})</b><br/>Total: {{$json.total}}<br/> ✅ Positive:  {{ $('Code (JS): BuildSummary').item.json.pct_positive }}(%)<br/> 😐 Neutral: {{ $('Code (JS): BuildSummary').item.json.pct_neutral }} (%)<br/> ❌ Negative:{{ $('Code (JS): BuildSummary').item.json.pct_negative }} %)<br/><br/> See attached pie chart for details.",
        "options": {
          "attachmentsUi": {
            "attachmentsBinary": [
              {}
            ]
          }
        }
      },
      "id": "48b6b50c-db6d-44d5-8df7-6f0ea44f0110",
      "name": "Gmail: Send Email",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2,
      "position": [
        2736,
        -48
      ],
      "webhookId": "61deffad-d20b-4bf8-aebb-b82c3c6610c7",
      "credentials": {
        "gmailOAuth2": {
          "id": "YyHYSD99tQb8fiBB",
          "name": "Gmail Auth account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "You are a sentiment classifier. Return ONLY JSON: {\\\"sentiment\\\":\\\"positive|neutral|negative\\\",\\\"confidence\\\":0.xx}",
              "role": "system"
            },
            {
              "content": "=Classify the sentiment of this feedback: {{ $json.Feedback }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        656,
        -48
      ],
      "id": "69d9350e-b00e-4e47-82a8-1cf781329923",
      "name": "Message a model",
      "credentials": {
        "openAiApi": {
          "id": "92QNutCiFq7pn4wu",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const payload = {\n  format: 'png',\n  width: 700,\n  height: 500,\n  chart: {\n    type: 'pie',\n    data: {\n      labels: $json.labels,              // ← real arrays\n      datasets: [{ data: $json.data }]   // ← real arrays\n    },\n    options: {\n      plugins: {\n        title: { display: true, text: \"Today's Patient Sentiment\" },\n        legend: { position: 'bottom' }\n      }\n    }\n  }\n};\n\nreturn [{ json: { payload } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2208,
        -48
      ],
      "id": "9271fdaf-69a1-4274-8f05-be9c9e1117b7",
      "name": "QuickChart Body"
    }
  ],
  "pinData": {},
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Sheets: Read (all rows)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sheets: Read (all rows)": {
      "main": [
        [
          {
            "node": "Code (JS): FilterToday",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code (JS): FilterToday": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code (JS): ParseSentiment": {
      "main": [
        [
          {
            "node": "Sheets: Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sheets: Update": {
      "main": [
        [
          {
            "node": "Sheets: Read (all rows) (summary)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sheets: Read (all rows) (summary)": {
      "main": [
        [
          {
            "node": "Code (JS): BuildSummary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code (JS): BuildSummary": {
      "main": [
        [
          {
            "node": "QuickChart Body",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: QuickChart (PNG)": {
      "main": [
        [
          {
            "node": "Gmail: Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Code (JS): ParseSentiment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "QuickChart Body": {
      "main": [
        [
          {
            "node": "HTTP: QuickChart (PNG)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4f6113d2-6490-45bc-9a33-32356e5110a5",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7c98b94bd7a7fb805db022c40642364f32bca8509af61325d87c3c2052055fb5"
  },
  "id": "EeYhsFs7fByGbYdV",
  "tags": []
}